openapi: 3.1.0

info:
  title: D-Bo API Documentation
  version: 0.1.0
  description:
    This is the backend REST API for the application **D-Bo** - empowering users to play a familiar
    card game with friends and family together in real time.
    <br /><br />
    The REST API handles all stateless HTTP requests, including player authentication and account
    management, matchmaking, and game session lifecycle operations.
    <br /><br />
    To find out more about how **real-time player-to-player interaction** happens, check out the
    [Async API](./asyncapi.yaml) documentation.
    <hr />

servers:
  - url: https://api.d-bo.bigdevdog.com
    description: Production server
  - url: http://localhost:60600
    description: Local test server

tags:
  - name: Player Accounts
    description:
      These routes have to do with the creation, reading, updating, and deletion of player accounts.
  - name: Authentication
    description: These endpoints have to do with authenticating players.

paths:
  /players:
    post:
      tags:
        - Player Accounts
      summary: Create a new player account.
      description: |
        This endpoint is used when a player is registering a new account for D-Bo. A successful
        request results in the Player document being inserted into the database, a **Confirmation
        Token** being generated (used to confirm a player's email; good for 15 minutes), and
        a **registration email** being sent to the provided email address, welcoming them to the 
        application and providing them with a link to confirm their account.
        
        ## Request Body

        The body contains all the necessary information in order to create a new account.
        
        The first type of information required is the player's **login credentials** - their
        username, email address, and password. The following rules are enforced for a player's login
        credentials:
        
        **username**:
        
        - Must be between 6 and 16 characters
        - May only include letters, numbers, and underscores
        - It may not start with an underscore
        - It may not contain two or more consecutive underscores
        
        **password**:

        - Must be between 8 and 32 characters
        - Must include at least one of each of the following:
          - An uppercase letter
          - A lowercase letter     
          - A number
          - One of the following symbols: `! @ # $ % ^ & * + = ?`
        - It may not contain any spaces or symbols not listed above
        
        **email**:

        - It must contain a single `@` character, separating the **prefix** and the **domain**
        - The prefix must not:
          - Be an empty string
          - Contain characters other than letters, numbers, and the following symbols: `. _ + -`
          - Begin nor end with a dot
          - Contain consecutive dots
        - The domain must not:
          - Be an empty string
          - Contain characters other than letters, numbers, dots, and hyphens
        - Each **level** (separated by dots) of the domain must not:
          - Be an empty string
          - Begin nor end with a hyphen
        - The **top level domain** (the final level) must contain two or more characters
        
        Additionally, the *email* and *username* fields must be **case-insensitively unique** to any
        others which exist in the database.

        Also required in this request is the player's gender and preferred language, which have a
        unique relationship to the *pronoun* field. The *pronoun* field is set to match the player's
        gender in all cases but the following:

        Spanish-speaking players with a non-binary gender get to choose how they should be referred
        to with gendered language. This is important because there is no **universally accepted**
        way to refer to non-binary people in Spanish. There is a fairly new trend involving "-e"
        endings, but some players may not prefer this; therefore, they are given the choice of how
        they should be referred to. The table below provides an example:

        | Pronoun | "(He/She/They) have been your friend for 1 month." |
        | ------- | -------------------------------------------------- |
        | m       | "Ã‰l ha sido su amigo por un mes."                  |
        | f       | "Ella ha sido su amiga por un mes."                |
        | nb      | "Elle ha sido su amigue por un mes."               |

        A player's pronouns are used to customize the game interface, email correspondences, etc.
      requestBody:
        description: Provide the proposed username, password, and email for the new account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: ^(?!_)(?!.*__)[A-Za-z0-9_]{6,16}$
                  example: jaeger_dog
                password:
                  type: string
                  pattern: ^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*+=?])[A-Za-z\d!@#$%^&*+=?]{8,32}$
                  example: thr0wTH3b4ll!
                email:
                  type: string
                  format: email
                  example: jaeger.dog@bigdevdog.com
                gender:
                  $ref: '#/components/schemas/Gender'
                preferred_language:
                  $ref: '#/components/schemas/Language'
                pronoun:
                  $ref: '#/components/schemas/Gender'
                time_zone:
                  $ref: '#/components/schemas/TimeZone'
              required:
                - username
                - password
                - email
                - gender
                - preferred_language
                - time_zone
      responses:
        200:
          description: The player account has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerInfo'
        400:
          description: |
            The account could not be created for one of two reasons: 
            
            1. Because one or more of the login credentials provided 
            do not meet the set requirements (i.e. password is too short; email address is missing 
            an @ symbol).\
            This will provide a response with at least one of the following fields: 
            "username_problems", "password_problems", "email_problems", each of which contain an
            array of Strings describing the problems with that field's input (as shown in the 
            **InvalidPlayerInfo** example).
            2. Because the provided **time_zone** could not be parsed by the system.\
            This will provide a response with a "message" field indicating the problem (as shown in
            the **TimeZoneParseMessage** example).
            
            This response could also occur because the request body was not proper JSON - in this
            case, a plaintext message will be returned describing the error.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidPlayerInfoResponse'
                  - $ref: '#/components/schemas/SimpleMessageResponse'
              examples:
                InvalidPlayerInfo:
                  $ref: '#/components/examples/BadUsernameAndEmail'
                TimeZoneParseMessage:
                  $ref: '#/components/examples/TimeZoneParseMessage'
        409:
          description:
            The account could not be created, because the username and/or email address provided 
            already exist for an active account within the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uniqueness_violations:
                    type: array
                    items:
                      type: string
                      enum:
                        - username
                        - email
                example:
                  uniqueness_violations:
                    - username
                    - email
        422:
          description: |
            The account could not be created because the request body could not be processed. It 
            could be missing required fields, or the strings provided in the **gender**,
            **preferred_language**, or **pronoun** fields are not a valid enum (see Gender and
            Language schemas).
          content:
            text/plain:
              schema:
                type: string
              example: 
                "Failed to deserialize the JSON body into the target type: missing field `email` at 
                line 4 column 1"
        500:
          $ref: '#/components/responses/ServerSideError'

  /players/{player_id}/confirm/{token_id}:
    post:
      tags:
        - Player Accounts
      summary: Confirm a newly registered account.
      description: |
        This endpoint is used to verify a new player's email address. This marks the account as
        "confirmed", which allows the player to start logging in and utilizing the functionality of
        the application. This request requires that a **confirmation token** exists within the
        database, and that it is *not expired* - confirmation tokens expire after **15 minutes**.

        During account registration, a link is provided in the registration email to a page where 
        the player can click a button to confirm their account and start playing. If the **token** 
        represented by the *token_id* path parameter is found to be **expired**, the player will
        have to request a new token, receive a new email, and follow that link within 15 minutes.

        It is important to note: confirmation tokens and *unconfirmed* player accounts are
        automatically deleted from the database after **two days** - after two days without
        confirming the account, the player must register again if they wish to play.

        Additionally, there may only ever be a single confirmation token associated with any single
        player account in the database at any time. So, if a new email is sent with a new token
        link, **all previously provided links** will be rendered obsolete.

        Upon success, the used confirmation token will be deleted from the database.
      parameters:
        - $ref: '#/components/parameters/PlayerId'
        - $ref: '#/components/parameters/TokenId'
      responses:
        204:
          description: The account has been confirmed successfully, allowing the player to start
            using D-Bo.
        404:
          description: The account could not be confirmed because a document was missing.
          content:
            application/json:
              schema:
                description: Tells the client from which collection the document is missing.
                type: object
                properties:
                  missing:
                    type: string
                    enum:
                      - players
                      - confirmation-tokens
        403:
          description: The player account does not match up with the token.
        409:
          description: The player account has already been confirmed.
        410:
          description: The confirmation token has expired after 15 minutes.
        500:
          $ref: '#/components/responses/ServerSideError'

    delete:
      tags: 
        - Player Accounts
      summary: Reject a newly registered account.
      description: |
        This endpoint is used to **reject** an account registration. This would mostly be used in
        the case that somebody has received a registration email by mistake. It will immediately
        delete all information related to the associated account.

        Unlike the POST request to confirm a new account, this endpoint will work regardless of
        whether the confirmation token has expired 15 minutes after creation; it simply requires
        that the player account (associated with the player_id) and the confirmation token 
        (associated with the token_id) **both** exist within the database.

        It is important to note: confirmation tokens and *unconfirmed* player accounts are
        automatically deleted from the database after **two days**. If this request is attempted,
        and neither can be found, that likely means that the account has already been deleted (or 
        that the request did not correspond with any existing account). In this case, a success
        response is *still returned*, because all traces of the count have been erased, which was 
        the goal all along.
      parameters:
        - $ref: '#/components/parameters/PlayerId'
        - $ref: '#/components/parameters/TokenId'
      responses:
        # ERROR: The 409 response returned by this endpoint should be a 403 response; the 403
        # response should probably be a 409.
        204:
          description: The account has been wiped successfully from our database.
        403:
          description: The account has already been confirmed, and therefore cannot be deleted in 
            this way.
        404:
          description: The account could not be deleted because the token could not be found.
        409:
          description: The account could not be deleted because the token does not match the player.
        500:
          $ref: '#/components/responses/ServerSideError'
  
    put:
      tags:
        - Player Accounts
      summary: Resend the registration email with a fresh token
      description: |
        This endpoint is usually used after a player attempts to confirm their account, but finds
        their token to be expired after 15 minutes. The request verifies that both the player and
        the old token still exist and match each other. Then it will generate a new refresh token to 
        replace the old one in the database, and sends a new registration email containing a link 
        with the new token ID. This token will be good for another 15 minutes after completing this
        request.
      parameters:
        - $ref: '#/components/parameters/PlayerId'
        - $ref: '#/components/parameters/TokenId'
      responses:
        # Error: The 409 response should be a 403 response; the 403 response should probably be a
        # 409.
        204:
          description: The request was completed and the email was sent successfully.
        403:
          description: The request failed because the player account is already confirmed.
        404:
          description: Either the player or the token could not be found
          content:
            application/json:
              schema:
                description: Tells the client from which collection the document is missing.
                type: object
                properties:
                  missing:
                    type: string
                    enum:
                      - players
                      - confirmation-tokens
        409:
          description: The request failed because the token does not match the player.
        500:
          $ref: '#/components/responses/ServerSideError'

  /players/login:
    post:
      tags:
        - Authentication
      summary: Attempt to log in via username/email and password.
      description: |
        This endpoint is called whenever a user attempts to log in with their username and password.
        Upon success, this endpoint will return an **access token** in the response body, which can 
        be used to authenticate the player for the next **15 minutes**.
        
        This endpoint also generates a **refresh token** for the player, and returns it to the
        client via an **HTTP-only cookie** which will automatically be shared with the **POST
        /players/refresh** endpoint.
        
        The most common cause of failure for this function is an authentication failure, meaning the
        provided username/email and password combination does not match the records stored in the 
        database.
        
        A 500 response could be returned in the case that the database connection failed, or in the
        very unlikely case that an internal adapter has failed within the application.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username_or_email:
                  type: string
                  description: 
                    Either the username or email address of the player to be authenticated. This 
                    value is **case-insensitive**.
                password:
                  type: string
                  description:
                    The password of the player to be authenticated. This value must be an **exact
                    match** in order to succeed.
              required:
                - username
                - password
      responses:
        200:
          description: |
            The player has been authenticated successfully. The response body contains an access
            token to securely authenticate the player for the next **15 minutes**, and an HTTP-only
            cookie containing refresh token information has been set for the **POST 
            /players/refresh** endpoint, valid for 30 days.
          headers:
            Set-Cookie:
              description:
                An HTTP-only cookie which can be used to refresh an expired access token.
              schema:
                type: string
                example: 
                  refresh_token=6727bdde-ecf7-4f2c-9f82-fa1fdcb61ed1:JroD-BB9RLXWqB7A-7BNQT6kcNkz-xzLMSY9NonP4_Y; 
                  HttpOnly; SameSite=Strict; Path=/players/refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 
                      eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhMjljMDZhZS05MWM4LTQ4NDktYmM3MS05NmIwYmNlOTAzMDgiLCJleHAiOjE3NTczNzU0MjAsImlhdCI6MTc1NzM3NDUyMH0.2lQnOVkusYC0nfue8FbTQjFxM9fXojdTGEvG8djAAx4
        400:
          description: The request body was not proper JSON.
          content:
            text/plain:
              schema:
                type: string
                example: 
                  "Failed to parse the request body as JSON: trailing comma at line 4 column 1"
        401:
          description: 
            Authentication failed; the username/email and/or password did not match any existing
            records in the database.
        403:
          description:
            The account is currently locked! Login functionality is blocked until the time presented
            in the response body.
          content:
            application/json:
              schema:
                type: object
                description: Provides the UTC time at which the account will become unlocked.
                properties:
                  locked_until:
                    type: string
                    example: 2025-10-05T17:08:47.485308239+00:00
                required:
                  - locked_until
        409:
          description:
            The login failed because the account is not yet confirmed. The account must be confirmed
            by following the link in the registration email before attempting to log in.
        422:
          description: The request body could not be processed; most likely because it is missing
            required fields.
          content:
            text/plain:
              schema:
                type: string
                example: 
                  "Failed to deserialize the JSON body into the target type: missing field 
                  `username_or_email` at line 4 column 1"
        500:
          $ref: '#/components/responses/ServerSideError'

  /players/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh the player's authentication tokens
      description: |
        This endpoint is used to generate a fresh access token for the player to use to
        authenticate themselves for 15 minutes, and replaces their old refresh token with a fresh
        one in the database.

        This request requires that an HTTP-only cookie be set for this path, containing the refresh
        token id and secret. The cookie will be extracted, and then its credentials will be verified
        against the existing refresh token. The refresh token will not work if it is more than 30 
        days old, or if it has been marked as "revoked". It will then find the associated player
        account in order to generate new authentication tokens for the player.
      parameters:
        - in: cookie
          name: refresh_token
          required: true
          description: The refresh token header
          schema:
            type: string
            example: 1f1cbaac-34d6-41d7-ba73-5137831a27fb:aGw_YnVbBT8WOkYRyWA1AqhYa0Hvmz7Jwe4tIMppPnc
      responses:
        200:
          description: The request was successful. A new cookie has been set, good for 30 days, and
            the body contains the new access token to authenticate the player for 15 minutes.
          headers:
            Set-Cookie:
              description:
                An HTTP-only cookie which can be used to refresh an expired access token.
              schema:
                type: string
                example: 
                  refresh_token=6727bdde-ecf7-4f2c-9f82-fa1fdcb61ed1:JroD-BB9RLXWqB7A-7BNQT6kcNkz-xzLMSY9NonP4_Y; 
                  HttpOnly; SameSite=Strict; Path=/players/refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 
                      eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhMjljMDZhZS05MWM4LTQ4NDktYmM3MS05NmIwYmNlOTAzMDgiLCJleHAiOjE3NTczNzU0MjAsImlhdCI6MTc1NzM3NDUyMH0.2lQnOVkusYC0nfue8FbTQjFxM9fXojdTGEvG8djAAx4
        401:
          description: The request failed because the cookie was not set, was formatted incorrectly, 
            did not match the records in the database, or was not associated with an existing player
            account.
        403:
          description: The request failed because the token had been revoked.
        410:
          description: The request failed because the token was expired after more than 30 days.
        500:
          $ref: '#/components/responses/ServerSideError'

components:
  examples:
    # Message Responses
    TimeZoneParseMessage:
      value:
        message: The provided time_zone could not be parsed!
    
    # InvalidPlayerInfo Responses
    BadUsernameAndEmail:
      value:
        username_problems: 
          - Username cannot start with an underscore.
          - Username may not contain consecutive underscores.
        email_problems:
          - Email prefix is empty!
          - Email domain includes illegal characters. Allowed characters are letters, numbers, and hyphens.
          - Email domain may not include consecutive dots.
          - Email top level domain must meet or exceed two characters.
    BadUsername:
      value:
        username_problems:
          - Username cannot start with an underscore.
          - Username may not contain consecutive underscores.
    BadEmail:
      value:
        email_problems:
          - Email prefix is empty!
          - Email domain includes illegal characters. Allowed characters are letters, numbers, and hyphens.
          - Email domain may not include consecutive dots.
          - Email top level domain must meet or exceed two characters.
    BadPassword:
      value:
        password_problems:
          - "Password must include one of the following symbols: ! @ # $ % ^ & * + = ?"
          - Password must be between 8 and 32 characters - found 6

  parameters: 
    PlayerId:
      in: path
      name: player_id
      required: true
      schema:
        type: string
      description: A UUID v4 identifying the player.
      example: 9334c148-bff1-47b2-9e56-7469b788064e

    TokenId:
      in: path
      name: token_id
      required: true
      schema:
        type: string
      description: A UUID v4 identifying the confirmation token.
      example: 06d08b8c-c677-441f-9599-afd6f505c517

  responses:
    ServerSideError:
      description: The request could not be completed due to a server-side error.

  schemas:
    Gender:
      type: string
      enum:
        - m
        - f
        - nb

    Language:
      type: string
      enum:
        - en
        - es
    
    TimeZone:
      type: string
      example: America/Los_Angeles

    PlayerInfo:
      type: object
      properties:
        player_id:
          type: string
        username:
          type: string
        email:
          type: string
        created:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        preferred_language:
          $ref: '#/components/schemas/Language'
        pronoun:
          $ref: '#/components/schemas/Gender'
        stats:
          $ref: '#/components/schemas/PlayerStats'
      required:
        - player_id
        - username
        - password
        - created
        - gender
        - preferred_language
        - pronoun
        - stats
      example:
        username: jaeger_dog
        email: jaeger.dog@bigdevdog.com
        player_id: 9334c148-bff1-47b2-9e56-7469b788064e
        created: 2025-10-04T02:12:50.602Z
        gender: m
        preferred_language: en
        pronoun: m
        stats:
          wins: 0
          losses: 0
          dropouts: 0

    PlayerStats:
      type: object
      properties:
        wins:
          type: number
        losses:
          type: number
        dropouts:
          type: number
      example:
        wins: 0
        losses: 0
        dropouts: 0
    
    SimpleMessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    InvalidPlayerInfoResponse:
      type: object
      properties:
        username_problems:
          type: array
          items: 
            type: string
        password_problems:
          type: array
          items:
            type: string
        email_problems:
          type: array
          items:
            type: string

