openapi: 3.1.0

info:
  title: D-Bo API Documentation
  version: 0.1.0
  description:
    This is the backend REST API for the application **D-Bo** - empowering users to play a familiar
    card game with friends and family together in real time.
    <br /><br />
    The REST API handles all stateless HTTP requests, including player authentication and account
    management, matchmaking, and game session lifecycle operations.
    <br /><br />
    To find out more about how **real-time player-to-player interaction** happens, check out the
    [Async API](./asyncapi.yaml) documentation.
    <hr />

servers:
  - url: https://api.d-bo.bigdevdog.com
    description: Production server
  - url: http://localhost:60600
    description: Local test server

tags:
  - name: Player Accounts
    description:
      These routes have to do with the creation, reading, updating, and deletion of player accounts.
  - name: Email Verification
    description: 
      These endpoints have to do with confirming or rejecting the player email verification.

paths:
  /players:
    post:
      tags:
        - Player Accounts
      summary: Create a new player account.
      description:
        This endpoint is used when a player is registering a new account for D-Bo.
      requestBody:
        description: Provide the proposed username, password, and email for the new account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: ^(?!_)(?!.*__)[A-Za-z0-9_]{6,16}$
                  example: jaeger_dog
                password:
                  type: string
                  pattern: ^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*+=?])[A-Za-z\d!@#$%^&*+=?]{8,32}$
                  example: thr0wTH3b4ll!
                email:
                  type: string
                  format: email
                  example: jaeger.dog@bigdevdog.com
              required:
                - username
                - password
                - email
      responses:
        200:
          description: The player account has been created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                  player_id:
                    type: string
                required:
                  - username
                  - password
                  - player_id
                example:
                  username: jaeger_dog
                  email: jaeger.dog@bigdevdog.com
                  player_id: 9334c148-bff1-47b2-9e56-7469b788064e
        400:
          description:
            The account could not be created, because one or more of the fields provided do not meet
            the set requirements (i.e. password is too short; email address is missing an @ symbol).
            <br /><br />
            This response could also occur because the request body was not proper JSON - in this
            case, a plaintext message will be returned describing the error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: array
                    items: 
                      type: string
                  password:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
                example:
                  username: 
                    - Username cannot start with an underscore.
                    - Username may not contain consecutive underscores.
                  email:
                    - Email prefix is empty!
                    - Email domain includes illegal characters. Allowed characters are letters, numbers, and hyphens.
                    - Email domain may not include consecutive dots.
                    - Email top level domain must meet or exceed two characters.
        409:
          description:
            The account could not be created, because the username and/or email address provided 
            already exist for an active account within the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: boolean
                    description: true if the username already exists in the database.
                  email:
                    type: boolean
                    description: true if the email already exists in the database.
                required:
                  - username
                  - email
                example:
                  username: false 
                  email: true
        422:
          description:
            The account could not be created because the request body could not be processed; most
            likely because it is missing critical fields.
          content:
            text/plain:
              schema:
                type: string
              example: 
                "Failed to deserialize the JSON body into the target type: missing field `email` at 
                line 4 column 1"
        500:
          $ref: '#/components/responses/ServerSideError'

  /players/login:
    post:
      tags:
        - Player Accounts
      summary: Attempt to log in via username/email and password.
      description: 
        This endpoint is called whenever a user attempts to log in with their username and password.
        Upon success, this endpoint will return an **access token** in the response body, which can 
        be used to authenticate the player for the next **15 minutes**.
        <br /><br />
        This endpoint also generates a **refresh token** for the player, and returns it to the
        client via an **HTTP-only cookie** which will automatically be shared with the **POST
        /players/refresh** endpoint.
        <br /><br />
        The most common cause of failure for this function is an authentication failure, meaning the
        provided username/email and password combination does not match the records stored in the 
        database.
        <br /><br />
        A 500 response could be returned in the case that the database connection failed, or in the
        very unlikely case that an internal adapter has failed within the application.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username_or_email:
                  type: string
                  description: 
                    Either the username or email address of the player to be authenticated. This 
                    value is **case-insensitive**.
                password:
                  type: string
                  description:
                    The password of the player to be authenticated. This value must be an **exact
                    match** in order to succeed.
              required:
                - username
                - password
      responses:
        200:
          description:
            The player has been authenticated successfully. The response body contains an access
            token to securely authenticate the player for the next **15 minutes**, and an HTTP-only
            cookie containing refresh token information has been set for the **POST 
            /players/refresh** endpoint.
          headers:
            Set-Cookie:
              description:
                An HTTP-only cookie which can be used to refresh an expired access token.
              schema:
                type: string
                example: 
                  refresh_token=6727bdde-ecf7-4f2c-9f82-fa1fdcb61ed1:JroD-BB9RLXWqB7A-7BNQT6kcNkz-xzLMSY9NonP4_Y; 
                  HttpOnly; SameSite=Strict; Path=/players/refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 
                      eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhMjljMDZhZS05MWM4LTQ4NDktYmM3MS05NmIwYmNlOTAzMDgiLCJleHAiOjE3NTczNzU0MjAsImlhdCI6MTc1NzM3NDUyMH0.2lQnOVkusYC0nfue8FbTQjFxM9fXojdTGEvG8djAAx4
        400:
          description: The request body was not proper JSON.
          content:
            text/plain:
              schema:
                type: string
                example: 
                  "Failed to parse the request body as JSON: trailing comma at line 4 column 1"
        401:
          description: 
            Authentication failed; the username/email and/or password did not match the database.
        422:
          description: The request body could not be processed; most likely because it is missing
            critical fields.
          content:
            text/plain:
              schema:
                type: string
                example: 
                  "Failed to deserialize the JSON body into the target type: missing field 
                  `username_or_email` at line 4 column 1"
        500:
          description: The request could not be completed due to a server-side error.

components:
  responses:
    ServerSideError:
      description: The request could not be completed due to a server-side error.
      

